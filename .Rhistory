reg_savings[i+1,4] <- growing_annuity(2000, 0.001,0.04,i)+future_value(10000,0.001,i)
reg_savings[i+1,1] <- i
}
reg_savings<-data.frame(reg_savings)
high_savings <- matrix(data=NA,11,4)
for (i in 0:10){
high_savings[i+1,2] <- future_value(10000, 0.025,i)
high_savings[i+1,3] <- annuity(2000, 0.0225,i)+future_value(10000,0.0225,i)
high_savings[i+1,4] <- growing_annuity(2000, 0.0225,0.04,i)+future_value(10000,0.0225,i)
high_savings[i+1,1] <- i
}
high_savings<-data.frame(high_savings)
index_fund <- matrix(data=NA,11,4)
for (i in 0:10){
index_fund[i+1,2] <- future_value(10000, 0.065,i)
index_fund[i+1,3] <- annuity(2000, 0.065,i)+future_value(10000,0.065,i)
index_fund[i+1,4] <- growing_annuity(2000, 0.065,0.04,i)+future_value(10000,0.065,i)
index_fund[i+1,1] <- i
}
index_fund<-data.frame(index_fund)
colnames(high_savings) <- c("year","no contrib","fixed contrib","growing contrib")
colnames(reg_savings) <- c("year","no contrib","fixed contrib","growing contrib")
colnames(index_fund) <- c("year","no contrib","fixed contrib","growing contrib")
rownames(high_savings) <- as.integer(c("0","1","2","3","4","5","6","7","8","9","10"))
rownames(reg_savings) <- as.integer(c("0","1","2","3","4","5","6","7","8","9","10"))
rownames(index_fund) <- as.integer(c("0","1","2","3","4","5","6","7","8","9","10"))
reg_savings <- cbind(ID=rownames(reg_savings), reg_savings)
high_savings <- cbind(ID=rownames(high_savings), high_savings)
index_fund <- cbind(ID=rownames(index_fund), index_fund)
reg_savings$fn <- "reg_savings"
high_savings$fn <- "high_savings"
index_fund$fn <- "index_fund"
alldf <- rbind(reg_savings, high_savings, index_fund)
alldf <- within(alldf, rm(year))
alldf.m <- melt(alldf)
ggplot(data=alldf.m, aes(x=0:10, y = value, colour = variable, group = variable)) +
geom_line() + facet_wrap(~fn)
ggplot(data=alldf.m, aes(x=ID, y = value, colour = variable, group = variable)) +
geom_line() + facet_wrap(~fn) + scale_x_discrete()
ggplot(data=alldf.m, aes(x=ID, y = value, colour = variable, group = variable)) +
geom_line() + facet_wrap(~fn) + scale_x_discrete(limits=ID)
ggplot(data=alldf.m, aes(x=ID, y = value, colour = variable, group = variable)) +
geom_line() + facet_wrap(~fn) + scale_x_discrete(limits=c(0,1,,2,3,4,5,6,7,8,9,10))
ggplot(data=alldf.m, aes(x=ID, y = value, colour = variable, group = variable)) +
geom_line() + facet_wrap(~fn) + scale_x_discrete(limits=c(0,1,2,3,4,5,6,7,8,9,10))
help(ggplot)
ggplot(data=alldf.m, aes(x=ID, y = value, colour = variable, group = variable)) +
geom_line() + facet_wrap(~fn) + scale_x_discrete(limits=c(0,1,2,3,4,5,6,7,8,9,10)) +labs(x = "Years", y = "Money (dollars)")
require(reshape2)
library(ggplot2)
reg_savings <- matrix(data=NA,21,4)
for (i in 0:20){
reg_savings[i+1,2] <- future_value(10000, 0.001,i)
reg_savings[i+1,3] <- annuity(2000, 0.001,i)+future_value(10000,0.0001,i)
reg_savings[i+1,4] <- growing_annuity(2000, 0.001,0.04,i)+future_value(10000,0.001,i)
reg_savings[i+1,1] <- i
}
reg_savings<-data.frame(reg_savings)
high_savings <- matrix(data=NA,21,4)
for (i in 0:20){
high_savings[i+1,2] <- future_value(10000, 0.025,i)
high_savings[i+1,3] <- annuity(2000, 0.0225,i)+future_value(10000,0.0225,i)
high_savings[i+1,4] <- growing_annuity(2000, 0.0225,0.04,i)+future_value(10000,0.0225,i)
high_savings[i+1,1] <- i
}
high_savings<-data.frame(high_savings)
index_fund <- matrix(data=NA,21,4)
for (i in 0:20){
index_fund[i+1,2] <- future_value(10000, 0.065,i)
index_fund[i+1,3] <- annuity(2000, 0.065,i)+future_value(10000,0.065,i)
index_fund[i+1,4] <- growing_annuity(2000, 0.065,0.04,i)+future_value(10000,0.065,i)
index_fund[i+1,1] <- i
}
index_fund<-data.frame(index_fund)
colnames(high_savings) <- c("year","no contrib","fixed contrib","growing contrib")
colnames(reg_savings) <- c("year","no contrib","fixed contrib","growing contrib")
colnames(index_fund) <- c("year","no contrib","fixed contrib","growing contrib")
rownames(high_savings) <- as.integer(c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"))
rownames(reg_savings) <- as.integer(c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"))
rownames(index_fund) <- as.integer(c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"))
reg_savings <- cbind(ID=rownames(reg_savings), reg_savings)
high_savings <- cbind(ID=rownames(high_savings), high_savings)
index_fund <- cbind(ID=rownames(index_fund), index_fund)
reg_savings$fn <- "reg_savings"
high_savings$fn <- "high_savings"
index_fund$fn <- "index_fund"
alldf <- rbind(reg_savings, high_savings, index_fund)
alldf <- within(alldf, rm(year))
alldf.m <- melt(alldf)
ggplot(data=alldf.m, aes(x=ID, y = value, colour = variable, group = variable)) +
geom_line() + facet_wrap(~fn) + scale_x_discrete(limits=c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20) +labs(x = "Years", y = "Money (dollars)", title = "Different Savings Scenarios Over Ten Years")
ggplot(data=alldf.m, aes(x=ID, y = value, colour = variable, group = variable)) +
geom_line() + facet_wrap(~fn) + scale_x_discrete(limits=c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)) +labs(x = "Years", y = "Money (dollars)", title = "Different Savings Scenarios Over Ten Years")
#' @title Range
#' @description computes the range of a numeric vector (i.e. max - min)
#' @param x a numeric vector
#' @return the range value (max - min)
stat_range <- function(x) {
max(x) - min(x)
}
# load the source code of the functions to be tested
source("functions.R")
# context with one test that groups expectations
context("Test for range value")
test_that("range works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_range(x), 4)
expect_length(stat_range(x), 1)
expect_type(stat_range(x), 'double')
})
states
paste("Alabama = 7" "Alaska = 6" "Arizona = 7" "Arkansas = 8" "California = 10", sep ="")
paste("Alabama = 7", "Alaska = 6", "Arizona = 7", "Arkansas = 8", "California = 10", sep ="")
paste("Alabama = 7", "Alaska = 6", "Arizona = 7", "Arkansas = 8", "California = 10", sep =" ")
states <- c("Alabama","Alaska","Arizona","Arkansas","California")
paste(states, nchar(states))
states <- c("Alabama","Alaska","Arizona","Arkansas","California")
paste(states, nchar(states), sep "=")
states <- c("Alabama","Alaska","Arizona","Arkansas","California")
paste(states, nchar(states), sep="=")
states <- c("Alabama","Alaska","Arizona","Arkansas","California")
paste(states, nchar(states), sep=" = ")
states <- c("Alabama","Alaska","Arizona","Arkansas","California")
paste(states, nchar(states), sep=" = ")
paste(states,collapse='')
help(tolower)
help(paste0)
factorial(nchar("ALABAMA"))
temp_convert <- function(x = 1, to = "celsius") {
to <- tolower(to)
switch(to,
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
}
temp_convert(30, 'Celsius')
to_celsius <- function(x = 1) {
(x - 32) * (5/9)
}
to_kelvin <- function(x = 1) {
(x + 459.67) * (5/9)
}
to_reaumur <- function(x = 1) {
(x - 32) * (4/9)
}
to_rankine <- function(x = 1) {
x + 459.67
}
temp_convert <- function(x = 1, to = "celsius") {
to <- tolower(to)
switch(to,
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
}
temp_convert(30, 'Celsius')
temp_convert(30, 'CELSIUS')
temp_convert(30, 'celsius')
vect <- paste("file", 1:10, sep ="")
vect
help(substr)
vect <- paste("file", 1:10, sep ="")
vect
substr(vect, "file",value = "dataset")
vect <- paste("file", 1:10, sep ="")
vect
substr(vect, "file")<- "dataset"
vect <- paste("file", 1:10, sep ="")
vect
substr(vect, "file", "file")<- "dataset"
vect <- paste("file", 1:10, sep ="")
vect
substr(vect, 1, 2)<- "dataset"
substr("abcdef", 2, 4)
vect <- paste("file", 1:10, sep ="")
vect
substring(vect, 1, 2)<- "dataset"
vect <- paste("file", 1:10, ".csv",sep ="")
vect
substring(vect, 1, 2)<- "dataset"
vect <- paste("file", 1:10, ".csv",sep ="")
vect
str_replace(vect, "file", "dataset")
help(strrep)
vect <- paste("file", 1:10, ".csv",sep ="")
vect
gsub("file", "dataset", vect)
outfile <- "output.txt"
# writing to 'outfile.txt'
cat("This is the first line", file = outfile)
# insert new line
cat("\n", file = outfile, append = TRUE)
cat("A 2nd line", file = "output.txt", append = TRUE)
# insert 2 new lines
cat("\n\n", file = outfile, append = TRUE)
cat("\nThe quick brown fox jumps over the lazy dog\n",
file = outfile, append = TRUE)
" hi /"/ d"
""
" hi \"\ d"
" hi "\ d"
" hi \" d"
outfile <- "output.txt"
# writing to 'outfile.txt'
cat("---", file = outfile)
# insert two new lines
cat("\n\n", file = outfile, append = TRUE)
cat("title: \"Some title\"", file = outfile, append = TRUE)
cat("author: \"Your name\"", file = "output.txt", append = TRUE)
# insert 2 new lines
cat("\n\n", file = outfile, append = TRUE)
cat("date: \"today's date\"", file = outfile, append = TRUE)
cat("output: \"html_document\"", file = outfile, append = TRUE)
cat("\n\n", file = outfile, append = TRUE)
cat("---", file = outfile, append = TRUE)
cat("\n\n", file = outfile, append = TRUE)
cat("\nThis is the first line\n",
file = outfile, append = TRUE)
cat("\nA 2nd Line\n",
file = outfile, append = TRUE)
cat("\n\n\n", file = outfile, append = TRUE)
cat("\nThe quick brown fox jumps over the lazy dog\n",
file = outfile, append = TRUE)
outfile <- "output.txt"
# writing to 'outfile.txt'
cat("---", file = outfile)
# insert two new lines
cat("title: \"Some title\"", file = outfile, append = TRUE)
cat("author: \"Your name\"", file = "output.txt", append = TRUE)
cat("date: \"today's date\"", file = outfile, append = TRUE)
cat("output: \"html_document\"", file = outfile, append = TRUE)
cat("---", file = outfile, append = TRUE)
cat("\n\n", file = outfile, append = TRUE)
cat("\nThis is the first line\n",
file = outfile, append = TRUE)
cat("A 2nd Line\n",
file = outfile, append = TRUE)
cat("\n\n\n", file = outfile, append = TRUE)
cat("\nThe quick brown fox jumps over the lazy dog\n",
file = outfile, append = TRUE)
outfile <- "output.txt"
# writing to 'outfile.txt'
cat("---", file = outfile)
# insert two new lines
cat("\n", file = outfile, append = TRUE)
cat("title: \"Some title\"", file = outfile, append = TRUE)
cat("\n", file = outfile, append = TRUE)
cat("author: \"Your name\"", file = "output.txt", append = TRUE)
cat("\n", file = outfile, append = TRUE)
cat("date: \"today's date\"", file = outfile, append = TRUE)
cat("\n", file = outfile, append = TRUE)
cat("output: \"html_document\"", file = outfile, append = TRUE)
cat("\n", file = outfile, append = TRUE)
cat("---", file = outfile, append = TRUE)
cat("\n\n", file = outfile, append = TRUE)
cat("\nThis is the first line\n",
file = outfile, append = TRUE)
cat("A 2nd Line\n",
file = outfile, append = TRUE)
cat("\n\n\n", file = outfile, append = TRUE)
cat("\nThe quick brown fox jumps over the lazy dog\n",
file = outfile, append = TRUE)
colors()
is_color <- function(color){
color <- tolower(color)
return(color %in% colors())
}
is_color <- function(color){
color <- tolower(color)
return(color %in% colors())
}
is_color('yellow')  # TRUE
is_color('blu')     # FALSE
is_color('turkuoise') # FALSE
USArrests
head(USArrests)
states <- rownames(USArrests)
head(states)
nchar(states)
head(tolower(states))
head(toupper(states))
head(casefold(states))
nchar(states)
sum(nchar(states)==6)
head(USArrests)
states <- rownames(USArrests)
head(states)
nchar(states)
head(tolower(states))
head(toupper(states))
head(casefold(states))
nchars<- nchar(states)
j <- 1
for (i in min(nchars):max(nchars)){
char_freq[j] <- sum(nchars == i)
j<- j+1
}
head(USArrests)
states <- rownames(USArrests)
head(states)
nchar(states)
head(tolower(states))
head(toupper(states))
head(casefold(states))
nchars<- nchar(states)
j <- 1
char_freq<- data.frame()
for (i in min(nchars):max(nchars)){
char_freq[j] <- sum(nchars == i)
j<- j+1
}
head(USArrests)
states <- rownames(USArrests)
head(states)
nchar(states)
head(tolower(states))
head(toupper(states))
head(casefold(states))
nchars<- nchar(states)
j <- 1
char_freq<- data.frame(matrix(ncol=(max(nchars)-min(nchars)), nrow = 2))
for (i in min(nchars):max(nchars)){
char_freq[j] <- sum(nchars == i)
j<- j+1
}
char_freq
head(USArrests)
states <- rownames(USArrests)
head(states)
nchar(states)
head(tolower(states))
head(toupper(states))
head(casefold(states))
nchars<- nchar(states)
j <- 1
char_freq<- data.frame(matrix(ncol=(max(nchars)-min(nchars)), nrow = 2))
for (i in min(nchars):max(nchars)){
char_freq[2,j] <- sum(nchars == i)
char_freq[1,j] <- i
j<- j+1
}
char_freq
head(USArrests)
states <- rownames(USArrests)
head(states)
nchar(states)
head(tolower(states))
head(toupper(states))
head(casefold(states))
nchars<- nchar(states)
j <- 1
char_freq<- data.frame(matrix(ncol=(max(nchars)-min(nchars)), nrow = 2))
for (i in min(nchars):max(nchars)){
char_freq[2,j] <- sum(nchars == i)
char_freq[1,j] <- i
j<- j+1
}
plot(char_freq[1,], char_freq[2,])
barplot(char_freq)
head(USArrests)
states <- rownames(USArrests)
head(states)
nchar(states)
head(tolower(states))
head(toupper(states))
head(casefold(states))
nchars<- nchar(states)
j <- 1
char_freq<- (matrix(ncol=(max(nchars)-min(nchars)), nrow = 2))
for (i in min(nchars):max(nchars)){
char_freq[2,j] <- sum(nchars == i)
char_freq[1,j] <- i
j<- j+1
}
char_freq
head(USArrests)
states <- rownames(USArrests)
head(states)
nchar(states)
head(tolower(states))
head(toupper(states))
head(casefold(states))
nchars<- nchar(states)
j <- 1
char_freq<- data.frame(matrix(ncol=(max(nchars)-min(nchars)), nrow = 2))
for (i in min(nchars):max(nchars)){
char_freq[2,j] <- sum(nchars == i)
char_freq[1,j] <- i
j<- j+1
}
plot(char_freq[1,], char_freq[2,])
}
barplot(as.matrix(char_freq))
char_freq
as.matrix(char_freq)
char_freq <- as.matrix(char_freq)
char_freq[1,]
char_freq[2,]
barplot(char_freq[nchar(states)])
char_freq <- as.matrix(char_freq)
barplot((char_freq), main = "Letters in States Distribution")
head(USArrests)
states <- rownames(USArrests)
head(states)
nchar(states)
head(tolower(states))
head(toupper(states))
head(casefold(states))
nchars<- nchar(states)
j <- 1
char_freq<- data.frame(matrix(ncol=(max(nchars)-min(nchars)), nrow = 2))
for (i in min(nchars):max(nchars)){
char_freq[2,j] <- sum(nchars == i)
char_freq[1,j] <- i
j<- j+1
}
char_freq <- as.matrix(char_freq)
barplot((char_freq), main = "Letters in States Distribution")
char_freq
table(nchar(states))
nchars<- nchar(states)
counts <-table(nchar(states))
barplot(counts)
getwd()
48.52+40.49+36.5+35.5
42.37+39.5+38.37+35.75
runApp("App-1")
library(shiny)
runApp("App-1")
getwd()
setwd("~/UC Berkeley 2/Stat 133/workout02")
runApp("App-1")
runApp("workout02")
getwd()
runApp("workout02")
getwd()
runApp("App-1")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp(stockVis)
runApp()
library(shiny)
runExample("02_text")
runApp()
modalities
library(shiny)
library(ggplot2)
# 1) Future Value Function
future_value <- function(amount,rate,years){
return(amount*(1+rate)^years)
}
future_value(amount = 100, rate = 0.05, years = 1)
future_value(amount = 500, rate = 0.05, years = 5)
future_value(amount = 1000, rate = 0.05, years = 10)
# 2) Future Value of Annuity
annuity <- function(contrib, rate, years){
return(contrib*((1+rate)^years-1)/rate)
}
annuity(contrib = 200, rate = 0.05, years = 1)
annuity(contrib = 200, rate = 0.05, years = 2)
annuity(contrib = 200, rate = 0.05, years = 10)
# 3) Future Value of Growing Annuity
growing_annuity <- function(contrib,rate,growth,years){
return(contrib*((1+rate)^years-(1+growth)^years)/(rate-growth))
}
growing_annuity(contrib = 200, rate = 0.05, growth = 0.03, years = 1)
growing_annuity(contrib = 200, rate = 0.05, growth = 0.03, years = 2)
growing_annuity(contrib = 200, rate = 0.05, growth = 0.03, years = 10)
# 4) Investing Modalities
## 4.1) For-loop and Table
modalities <- matrix(data=NA,11,4)
for (i in 0:10){
modalities[i+1,2] <- future_value(1000, 0.05,i)
modalities[i+1,3] <- annuity(200, 0.05,i)+future_value(1000,0.05,i)
modalities[i+1,4] <- growing_annuity(200, 0.05,0.03,i)+future_value(1000,0.05,i)
modalities[i+1,1] <- i
}
modalities
plot
runApp()
runApp()
runApp()
